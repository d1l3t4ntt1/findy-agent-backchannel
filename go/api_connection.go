/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ConnectionApiController binds http requests to an api service and writes the service results to the http response
type ConnectionApiController struct {
	service ConnectionApiServicer
}

// NewConnectionApiController creates a default api controller
func NewConnectionApiController(s ConnectionApiServicer) Router {
	return &ConnectionApiController{service: s}
}

// Routes returns all of the api route for the ConnectionApiController
func (c *ConnectionApiController) Routes() Routes {
	return Routes{
		{
			"ConnectionAcceptInvitation",
			strings.ToUpper("Post"),
			"/agent/command/connection/accept-invitation",
			c.ConnectionAcceptInvitation,
		},
		{
			"ConnectionAcceptRequest",
			strings.ToUpper("Post"),
			"/agent/command/connection/accept-request",
			c.ConnectionAcceptRequest,
		},
		{
			"ConnectionCreateInvitation",
			strings.ToUpper("Post"),
			"/agent/command/connection/{create-invitation:create-invitation\\/?}",
			c.ConnectionCreateInvitation,
		},
		{
			"ConnectionGetAll",
			strings.ToUpper("Get"),
			"/agent/command/connection",
			c.ConnectionGetAll,
		},
		{
			"ConnectionGetById",
			strings.ToUpper("Get"),
			"/agent/command/connection/{connectionId}",
			c.ConnectionGetById,
		},
		{
			"ConnectionReceiveInvitation",
			strings.ToUpper("Post"),
			"/agent/command/connection/receive-invitation",
			c.ConnectionReceiveInvitation,
		},
		{
			"ConnectionSendPing",
			strings.ToUpper("Post"),
			"/agent/command/connection/send-ping",
			c.ConnectionSendPing,
		},
	}
}

// ConnectionAcceptInvitation - Accept an invitation
func (c *ConnectionApiController) ConnectionAcceptInvitation(w http.ResponseWriter, r *http.Request) {
	inlineObject1 := &InlineObject1{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject1); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.ConnectionAcceptInvitation(r.Context(), *inlineObject1)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionAcceptRequest - Accept a connection request
func (c *ConnectionApiController) ConnectionAcceptRequest(w http.ResponseWriter, r *http.Request) {
	inlineObject2 := &InlineObject2{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject2); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.ConnectionAcceptRequest(r.Context(), *inlineObject2)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionCreateInvitation - Create a new connection invitation
func (c *ConnectionApiController) ConnectionCreateInvitation(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ConnectionCreateInvitation(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionGetAll - Get all connections
func (c *ConnectionApiController) ConnectionGetAll(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ConnectionGetAll(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionGetById - Get connection by id
func (c *ConnectionApiController) ConnectionGetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	connectionId := params["connectionId"]

	result, err := c.service.ConnectionGetById(r.Context(), connectionId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionReceiveInvitation - Receive an invitation
func (c *ConnectionApiController) ConnectionReceiveInvitation(w http.ResponseWriter, r *http.Request) {
	inlineObject := &InlineObject{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.ConnectionReceiveInvitation(r.Context(), *inlineObject)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionSendPing - Send trust ping
func (c *ConnectionApiController) ConnectionSendPing(w http.ResponseWriter, r *http.Request) {
	inlineObject3 := &InlineObject3{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject3); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.ConnectionSendPing(r.Context(), *inlineObject3)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
