/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net/http"
	"os"
	"strings"

	openapi "github.com/findy-network/findy-test-harness/go"
	"github.com/findy-network/findy-test-harness/go/agent"
)

func main() {
	for _, a := range os.Args {
		log.Println(a)
	}

	name := os.Getenv("AGENT_NAME")
	port := "9999"
	switch name {
	case "Acme":
		port = "9010"
	case "Bob":
		port = "9020"
	case "Faber":
		port = "9030"
	case "Alice":
		port = "9040"
	}

	if strings.HasPrefix(os.Args[2], "9") {
		port = os.Args[2]
	}

	log.Printf("Starting server at port %s", port)

	a := agent.Init()
	a.Login()

	log.Printf("Agent login succeeded")

	ConnectionApiService := openapi.NewConnectionApiService(a)
	ConnectionApiController := openapi.NewConnectionApiController(ConnectionApiService)

	CredentialApiService := openapi.NewCredentialApiService()
	CredentialApiController := openapi.NewCredentialApiController(CredentialApiService)

	CredentialDefinitionApiService := openapi.NewCredentialDefinitionApiService()
	CredentialDefinitionApiController := openapi.NewCredentialDefinitionApiController(CredentialDefinitionApiService)

	DIDApiService := openapi.NewDIDApiService()
	DIDApiController := openapi.NewDIDApiController(DIDApiService)

	IssueCredentialApiService := openapi.NewIssueCredentialApiService()
	IssueCredentialApiController := openapi.NewIssueCredentialApiController(IssueCredentialApiService)

	IssueCredentialV2ApiService := openapi.NewIssueCredentialV2ApiService()
	IssueCredentialV2ApiController := openapi.NewIssueCredentialV2ApiController(IssueCredentialV2ApiService)

	PresentProofApiService := openapi.NewPresentProofApiService()
	PresentProofApiController := openapi.NewPresentProofApiController(PresentProofApiService)

	SchemaApiService := openapi.NewSchemaApiService()
	SchemaApiController := openapi.NewSchemaApiController(SchemaApiService)

	StatusApiService := openapi.NewStatusApiService()
	StatusApiController := openapi.NewStatusApiController(StatusApiService)

	router := openapi.NewRouter(ConnectionApiController, CredentialApiController, CredentialDefinitionApiController, DIDApiController, IssueCredentialApiController, IssueCredentialV2ApiController, PresentProofApiController, SchemaApiController, StatusApiController)

	log.Fatal(http.ListenAndServe(":"+port, router))
}
