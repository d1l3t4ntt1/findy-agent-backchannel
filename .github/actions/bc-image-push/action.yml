name: "Setup env"
description: "Sets up node and installs yarn dependencies"
inputs:
  IMAGE_NAME:
    description: "Image name"
    required: true
  AGENT_NAME:
    description: "Image name"
    required: true
  FILE:
    description: "Path to Dockerfile"
    required: true
  CONTEXT:
    description: "Path to build context"
    required: true
  PLATFORMS:
    description: "Supported platforms"
    required: false
    default: "linux/amd64,linux/arm64"
  TOKEN:
    description: "Github token"
    required: true
runs:
  using: "composite"
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.TOKEN }}

    - run: |
        echo "version=$(cat ./VERSION)" >> $GITHUB_ENV
        echo "IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/findy-agent-backchannel/${{inputs.IMAGE_NAME}}" >> $GITHUB_ENV
      shell: bash

    - name: clone aath
      run: |
        cd env
        make clone
      shell: bash

    # build and tag image for testing
    - uses: docker/build-push-action@v3
      with:
        load: true
        tags: |
          ${{env.IMAGE_TAG}}:test
        cache-from: type=registry,ref=${{env.IMAGE_TAG}}:latest
        context: ${{inputs.CONTEXT}}
        file: ${{inputs.FILE}}

    - name: test
      run: |
        docker tag ${{env.IMAGE_TAG}}:test ${{inputs.AGENT_NAME}}-agent-backchannel:latest
        cd ./env/.docker/aries-agent-test-harness
        ./manage service start von-network
        cd services/von-network/.build/von-network
        ./manage build
        cd ../../../..
        ./manage start -d ${{inputs.AGENT_NAME}}
      shell: bash
      env:
        NO_TTY: "1"

    # build for rest of the platforms
    - uses: docker/build-push-action@v3
      with:
        platforms: ${{inputs.PLATFORMS}}
        push: true
        tags: |
          ${{env.IMAGE_TAG}}:${{ env.version }}
          ${{env.IMAGE_TAG}}:latest
        cache-from: type=registry,ref=${{env.IMAGE_TAG}}:latest
        cache-to: type=inline
        context: ${{inputs.CONTEXT}}
        file: ${{inputs.FILE}}
