/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type OutOfBandReceiveInvitationRequestDataService struct {
	ID              string   `json:"id,omitempty"`
	Type            string   `json:"type,omitempty"`
	RecipientKeys   []string `json:"recipientKeys,omitempty"`
	ServiceEndpoint string   `json:"serviceEndpoint,omitempty"`
}

type OutOfBandReceiveInvitationRequestData struct {
	Type               string                                         `json:"@type,omitempty"`
	InvitationId       string                                         `json:"@id,omitempty"`
	HandshakeProtocols []string                                       `json:"handshake_protocols,omitempty"`
	Label              string                                         `json:"label,omitempty"`
	Services           []OutOfBandReceiveInvitationRequestDataService `json:"services,omitempty"`

	UseExistingConnection bool `json:"use_existing_connection"`

	MediatorConnectionId string `json:"mediator_connection_id,omitempty"`
}

// AssertOutOfBandReceiveInvitationRequestDataRequired checks if the required fields are not zero-ed
func AssertOutOfBandReceiveInvitationRequestDataRequired(obj OutOfBandReceiveInvitationRequestData) error {
	elements := map[string]interface{}{
		//"use_existing_connection": obj.UseExistingConnection,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseOutOfBandReceiveInvitationRequestDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of OutOfBandReceiveInvitationRequestData (e.g. [][]OutOfBandReceiveInvitationRequestData), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseOutOfBandReceiveInvitationRequestDataRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aOutOfBandReceiveInvitationRequestData, ok := obj.(OutOfBandReceiveInvitationRequestData)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertOutOfBandReceiveInvitationRequestDataRequired(aOutOfBandReceiveInvitationRequestData)
	})
}
