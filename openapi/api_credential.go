/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CredentialApiController binds http requests to an api service and writes the service results to the http response
type CredentialApiController struct {
	service      CredentialApiServicer
	errorHandler ErrorHandler
}

// CredentialApiOption for how the controller is set up.
type CredentialApiOption func(*CredentialApiController)

// WithCredentialApiErrorHandler inject ErrorHandler into controller
func WithCredentialApiErrorHandler(h ErrorHandler) CredentialApiOption {
	return func(c *CredentialApiController) {
		c.errorHandler = h
	}
}

// NewCredentialApiController creates a default api controller
func NewCredentialApiController(s CredentialApiServicer, opts ...CredentialApiOption) Router {
	controller := &CredentialApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CredentialApiController
func (c *CredentialApiController) Routes() Routes {
	return Routes{
		{
			"CredentialDeleteById",
			strings.ToUpper("Delete"),
			"/agent/command/credential/{credentialId}",
			c.CredentialDeleteById,
		},
		{
			"CredentialGetById",
			strings.ToUpper("Get"),
			"/agent/command/credential/{credentialId}",
			c.CredentialGetById,
		},
		{
			"CredentialGetRevocationStatusById",
			strings.ToUpper("Get"),
			"/agent/command/credential/revoked/{credentialId}",
			c.CredentialGetRevocationStatusById,
		},
	}
}

// CredentialDeleteById - Delete credential by id
func (c *CredentialApiController) CredentialDeleteById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	credentialIdParam := params["credentialId"]

	result, err := c.service.CredentialDeleteById(r.Context(), credentialIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CredentialGetById - Get credential by id
func (c *CredentialApiController) CredentialGetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	credentialIdParam := params["credentialId"]

	result, err := c.service.CredentialGetById(r.Context(), credentialIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CredentialGetRevocationStatusById - Get Credential Revocation Status
func (c *CredentialApiController) CredentialGetRevocationStatusById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	credentialIdParam := params["credentialId"]

	result, err := c.service.CredentialGetRevocationStatusById(r.Context(), credentialIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
