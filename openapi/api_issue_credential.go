/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueCredentialApiController binds http requests to an api service and writes the service results to the http response
type IssueCredentialApiController struct {
	service IssueCredentialApiServicer
	errorHandler ErrorHandler
}

// IssueCredentialApiOption for how the controller is set up.
type IssueCredentialApiOption func(*IssueCredentialApiController)

// WithIssueCredentialApiErrorHandler inject ErrorHandler into controller
func WithIssueCredentialApiErrorHandler(h ErrorHandler) IssueCredentialApiOption {
	return func(c *IssueCredentialApiController) {
		c.errorHandler = h
	}
}

// NewIssueCredentialApiController creates a default api controller
func NewIssueCredentialApiController(s IssueCredentialApiServicer, opts ...IssueCredentialApiOption) Router {
	controller := &IssueCredentialApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueCredentialApiController
func (c *IssueCredentialApiController) Routes() Routes {
	return Routes{ 
		{
			"IssueCredentialCreateOffer",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/create-offer",
			c.IssueCredentialCreateOffer,
		},
		{
			"IssueCredentialGetByThreadId",
			strings.ToUpper("Get"),
			"/agent/command/issue-credential/{credentialExchangeThreadId}",
			c.IssueCredentialGetByThreadId,
		},
		{
			"IssueCredentialIssue",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/issue",
			c.IssueCredentialIssue,
		},
		{
			"IssueCredentialSendOffer",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/send-offer",
			c.IssueCredentialSendOffer,
		},
		{
			"IssueCredentialSendProposal",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/send-proposal",
			c.IssueCredentialSendProposal,
		},
		{
			"IssueCredentialSendRequest",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/send-request",
			c.IssueCredentialSendRequest,
		},
		{
			"IssueCredentialStore",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/store",
			c.IssueCredentialStore,
		},
	}
}

// IssueCredentialCreateOffer - Create credential offer.
func (c *IssueCredentialApiController) IssueCredentialCreateOffer(w http.ResponseWriter, r *http.Request) {
	issueCredentialCreateOfferRequestParam := IssueCredentialCreateOfferRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueCredentialCreateOfferRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueCredentialCreateOfferRequestRequired(issueCredentialCreateOfferRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IssueCredentialCreateOffer(r.Context(), issueCredentialCreateOfferRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialGetByThreadId - Get credential exchange record by thread id
func (c *IssueCredentialApiController) IssueCredentialGetByThreadId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	credentialExchangeThreadIdParam := params["credentialExchangeThreadId"]
	
	result, err := c.service.IssueCredentialGetByThreadId(r.Context(), credentialExchangeThreadIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialIssue - Issue Credential
func (c *IssueCredentialApiController) IssueCredentialIssue(w http.ResponseWriter, r *http.Request) {
	issueCredentialIssueRequestParam := IssueCredentialIssueRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueCredentialIssueRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueCredentialIssueRequestRequired(issueCredentialIssueRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IssueCredentialIssue(r.Context(), issueCredentialIssueRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialSendOffer - Send credential offer
func (c *IssueCredentialApiController) IssueCredentialSendOffer(w http.ResponseWriter, r *http.Request) {
	issueCredentialSendOfferRequestParam := IssueCredentialSendOfferRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueCredentialSendOfferRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueCredentialSendOfferRequestRequired(issueCredentialSendOfferRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IssueCredentialSendOffer(r.Context(), issueCredentialSendOfferRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialSendProposal - Send credential proposal
func (c *IssueCredentialApiController) IssueCredentialSendProposal(w http.ResponseWriter, r *http.Request) {
	issueCredentialSendProposalRequestParam := IssueCredentialSendProposalRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueCredentialSendProposalRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueCredentialSendProposalRequestRequired(issueCredentialSendProposalRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IssueCredentialSendProposal(r.Context(), issueCredentialSendProposalRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialSendRequest - Send credential request
func (c *IssueCredentialApiController) IssueCredentialSendRequest(w http.ResponseWriter, r *http.Request) {
	issueCredentialSendRequestRequestParam := IssueCredentialSendRequestRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueCredentialSendRequestRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueCredentialSendRequestRequestRequired(issueCredentialSendRequestRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IssueCredentialSendRequest(r.Context(), issueCredentialSendRequestRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialStore - Store Credential
func (c *IssueCredentialApiController) IssueCredentialStore(w http.ResponseWriter, r *http.Request) {
	issueCredentialStoreRequestParam := IssueCredentialStoreRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueCredentialStoreRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueCredentialStoreRequestRequired(issueCredentialStoreRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IssueCredentialStore(r.Context(), issueCredentialStoreRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
