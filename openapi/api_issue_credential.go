/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type SendIssueCredentialRequest struct {
	Id string `json:"id"`
}

type IssueCredentialStoreRequest struct {
	Id string `json:"id"`
}

type IssueCredentialOfferRequest struct {
	Id string `json:"id"`

	Data struct {
		CredentialProposal CredentialPreview `json:"credential_preview,omitempty"`

		CredDefId string `json:"cred_def_id,omitempty"`

		ConnectionId string `json:"connection_id"`
	} `json:"data"`
}

type IssueCredentialIssueRequest struct {
	Id string `json:"id"`
}

type UNKNOWN_BASE_TYPE struct{}

// A IssueCredentialApiController binds http requests to an api service and writes the service results to the http response
type IssueCredentialApiController struct {
	service IssueCredentialApiServicer
}

// NewIssueCredentialApiController creates a default api controller
func NewIssueCredentialApiController(s IssueCredentialApiServicer) Router {
	return &IssueCredentialApiController{service: s}
}

// Routes returns all of the api route for the IssueCredentialApiController
func (c *IssueCredentialApiController) Routes() Routes {
	return Routes{
		{
			"IssueCredentialGetByThreadId",
			strings.ToUpper("Get"),
			"/agent/command/issue-credential/{credentialExchangeThreadId}",
			c.IssueCredentialGetByThreadId,
		},
		{
			"IssueCredentialIssue",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/{issue:issue\\/?}",
			c.IssueCredentialIssue,
		},
		{
			"IssueCredentialSendOffer",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/{send-offer:send-offer\\/?}",
			c.IssueCredentialSendOffer,
		},
		{
			"IssueCredentialSendProposal",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/{send-proposal:send-proposal\\/?}",
			c.IssueCredentialSendProposal,
		},
		{
			"IssueCredentialSendRequest",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/{send-request:send-request\\/?}",
			c.IssueCredentialSendRequest,
		},
		{
			"IssueCredentialStore",
			strings.ToUpper("Post"),
			"/agent/command/issue-credential/{store:store\\/?}",
			c.IssueCredentialStore,
		},
	}
}

// IssueCredentialGetByThreadId - Get credential exchange record by thread id
func (c *IssueCredentialApiController) IssueCredentialGetByThreadId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	credentialExchangeThreadId := params["credentialExchangeThreadId"]

	result, err := c.service.IssueCredentialGetByThreadId(r.Context(), credentialExchangeThreadId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialIssue - Issue Credential
func (c *IssueCredentialApiController) IssueCredentialIssue(w http.ResponseWriter, r *http.Request) {
	uNKNOWNBASETYPE := &IssueCredentialIssueRequest{}
	if err := json.NewDecoder(r.Body).Decode(&uNKNOWNBASETYPE); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.IssueCredentialIssue(r.Context(), *uNKNOWNBASETYPE)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialSendOffer - Send credential offer
func (c *IssueCredentialApiController) IssueCredentialSendOffer(w http.ResponseWriter, r *http.Request) {
	uNKNOWNBASETYPE := &IssueCredentialOfferRequest{}
	if err := json.NewDecoder(r.Body).Decode(&uNKNOWNBASETYPE); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.IssueCredentialSendOffer(r.Context(), *uNKNOWNBASETYPE)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialSendProposal - Send credential proposal
func (c *IssueCredentialApiController) IssueCredentialSendProposal(w http.ResponseWriter, r *http.Request) {
	inlineObject6 := &InlineObject6{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject6); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.IssueCredentialSendProposal(r.Context(), *inlineObject6)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialSendRequest - Send credential request
func (c *IssueCredentialApiController) IssueCredentialSendRequest(w http.ResponseWriter, r *http.Request) {
	uNKNOWNBASETYPE := &SendIssueCredentialRequest{}
	if err := json.NewDecoder(r.Body).Decode(&uNKNOWNBASETYPE); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.IssueCredentialSendRequest(r.Context(), *uNKNOWNBASETYPE)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IssueCredentialStore - Store Credential
func (c *IssueCredentialApiController) IssueCredentialStore(w http.ResponseWriter, r *http.Request) {
	uNKNOWNBASETYPE := &IssueCredentialStoreRequest{}
	if err := json.NewDecoder(r.Body).Decode(&uNKNOWNBASETYPE); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.IssueCredentialStore(r.Context(), *uNKNOWNBASETYPE)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
