/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"

	"github.com/findy-network/findy-agent-backchannel/agent"
)

// DIDExchangeApiService is a service that implements the logic for the DIDExchangeApiServicer
// This service should implement the business logic for every endpoint for the DIDExchangeApi API.
// Include any external packages or services that will be required by this service.
type DIDExchangeApiService struct {
	a *agent.Agent
}

// NewDIDExchangeApiService creates a default api service
func NewDIDExchangeApiService(a *agent.Agent) DIDExchangeApiServicer {
	return &DIDExchangeApiService{a: a}
}

// DidExchangeCreateRequestResolvableDid - Send a did exchange request to the didcomm service registered in the public did
func (s *DIDExchangeApiService) DidExchangeCreateRequestResolvableDid(ctx context.Context, didExchangeCreateRequestResolvableDidRequest DidExchangeCreateRequestResolvableDidRequest) (ImplResponse, error) {
	// TODO - update DidExchangeCreateRequestResolvableDid with the required logic for this service method.
	// Add api_did_exchange_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, DidExchangeGetByInvitationId200Response{}) or use other options such as http.Ok ...
	//return Response(200, DidExchangeGetByInvitationId200Response{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DidExchangeCreateRequestResolvableDid method not implemented")
}

// DidExchangeGetById - Get did exchange connection by id
func (s *DIDExchangeApiService) DidExchangeGetById(ctx context.Context, connectionId string) (ImplResponse, error) {
	// TODO - update DidExchangeGetById with the required logic for this service method.
	// Add api_did_exchange_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, DidExchangeGetById200Response{}) or use other options such as http.Ok ...
	//return Response(200, DidExchangeGetById200Response{}), nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DidExchangeGetById method not implemented")
}

// DidExchangeGetByInvitationId - Get did exchange connection by invitation id. Can be used to determine the connection id based of an invitation id.
func (s *DIDExchangeApiService) DidExchangeGetByInvitationId(ctx context.Context, invitationId string) (ImplResponse, error) {
	// TODO - update DidExchangeGetByInvitationId with the required logic for this service method.
	// Add api_did_exchange_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, DidExchangeGetByInvitationId200Response{}) or use other options such as http.Ok ...
	//return Response(200, DidExchangeGetByInvitationId200Response{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DidExchangeGetByInvitationId method not implemented")
}

// DidExchangeReceiveRequestResolvableDid - The documentation of this endpoint need to be looked at.
func (s *DIDExchangeApiService) DidExchangeReceiveRequestResolvableDid(ctx context.Context, didExchangeReceiveRequestResolvableDidRequest DidExchangeReceiveRequestResolvableDidRequest) (ImplResponse, error) {
	// TODO - update DidExchangeReceiveRequestResolvableDid with the required logic for this service method.
	// Add api_did_exchange_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, DidExchangeGetByInvitationId200Response{}) or use other options such as http.Ok ...
	//return Response(200, DidExchangeGetByInvitationId200Response{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DidExchangeReceiveRequestResolvableDid method not implemented")
}

// DidExchangeSendRequest - Send a did exchange request to the connection with specified id.
func (s *DIDExchangeApiService) DidExchangeSendRequest(ctx context.Context, connectionAcceptInvitationRequest ConnectionAcceptInvitationRequest) (ImplResponse, error) {
	// TODO - update DidExchangeSendRequest with the required logic for this service method.
	// Add api_did_exchange_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, interface{}{}) or use other options such as http.Ok ...
	//return Response(200, interface{}{}), nil

	//return Response(http.StatusNotImplemented, nil), errors.New("DidExchangeSendRequest method not implemented")
	id, err := s.a.RequestConnection(connectionAcceptInvitationRequest.Id)
	if err == nil {
		return Response(200, ConnectionAcceptInvitation200Response{ConnectionId: id, State: REQUEST}), nil
	}
	return Response(http.StatusInternalServerError, nil), err

}

// DidExchangeSendResponse - Send a did exchange response to the connection with specified id.
func (s *DIDExchangeApiService) DidExchangeSendResponse(ctx context.Context, connectionAcceptInvitationRequest ConnectionAcceptInvitationRequest) (ImplResponse, error) {
	// TODO - update DidExchangeSendResponse with the required logic for this service method.
	// Add api_did_exchange_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, interface{}{}) or use other options such as http.Ok ...
	//return Response(200, interface{}{}), nil

	//TODO: Uncomment the next line to return response Response(400, interface{}{}) or use other options such as http.Ok ...
	//return Response(400, interface{}{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DidExchangeSendResponse method not implemented")
}
