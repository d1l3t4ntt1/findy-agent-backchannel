/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type OutOfBandCreateInvitation200Response struct {

	ConnectionId string `json:"connection_id,omitempty"`

	State DidExchangeState `json:"state"`

	Invitation map[string]interface{} `json:"invitation"`
}

// AssertOutOfBandCreateInvitation200ResponseRequired checks if the required fields are not zero-ed
func AssertOutOfBandCreateInvitation200ResponseRequired(obj OutOfBandCreateInvitation200Response) error {
	elements := map[string]interface{}{
		"state": obj.State,
		"invitation": obj.Invitation,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertDidExchangeStateRequired(obj.State); err != nil {
		return err
	}
	return nil
}

// AssertRecurseOutOfBandCreateInvitation200ResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of OutOfBandCreateInvitation200Response (e.g. [][]OutOfBandCreateInvitation200Response), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseOutOfBandCreateInvitation200ResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aOutOfBandCreateInvitation200Response, ok := obj.(OutOfBandCreateInvitation200Response)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertOutOfBandCreateInvitation200ResponseRequired(aOutOfBandCreateInvitation200Response)
	})
}
