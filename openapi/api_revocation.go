/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RevocationApiController binds http requests to an api service and writes the service results to the http response
type RevocationApiController struct {
	service RevocationApiServicer
	errorHandler ErrorHandler
}

// RevocationApiOption for how the controller is set up.
type RevocationApiOption func(*RevocationApiController)

// WithRevocationApiErrorHandler inject ErrorHandler into controller
func WithRevocationApiErrorHandler(h ErrorHandler) RevocationApiOption {
	return func(c *RevocationApiController) {
		c.errorHandler = h
	}
}

// NewRevocationApiController creates a default api controller
func NewRevocationApiController(s RevocationApiServicer, opts ...RevocationApiOption) Router {
	controller := &RevocationApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RevocationApiController
func (c *RevocationApiController) Routes() Routes {
	return Routes{ 
		{
			"RevocationGetNotificationByThreadId",
			strings.ToUpper("Get"),
			"/agent/response/revocation-notification/{threadId}",
			c.RevocationGetNotificationByThreadId,
		},
		{
			"RevocationRevokeCredential",
			strings.ToUpper("Post"),
			"/agent/command/revocation/revoke",
			c.RevocationRevokeCredential,
		},
	}
}

// RevocationGetNotificationByThreadId - Get revocation notification message based on the revocation notification message `thread_id` property.
func (c *RevocationApiController) RevocationGetNotificationByThreadId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	threadIdParam := params["threadId"]
	
	result, err := c.service.RevocationGetNotificationByThreadId(r.Context(), threadIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RevocationRevokeCredential - Revoke Credential
func (c *RevocationApiController) RevocationRevokeCredential(w http.ResponseWriter, r *http.Request) {
	revocationRevokeCredentialRequestParam := RevocationRevokeCredentialRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&revocationRevokeCredentialRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRevocationRevokeCredentialRequestRequired(revocationRevokeCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RevocationRevokeCredential(r.Context(), revocationRevokeCredentialRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
