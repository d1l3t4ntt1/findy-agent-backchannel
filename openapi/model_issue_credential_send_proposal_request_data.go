/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type IssueCredentialSendProposalRequestData struct {

	Comment string `json:"comment,omitempty"`

	CredentialProposal CredentialPreview `json:"credential_proposal,omitempty"`

	SchemaIssuerDid string `json:"schema_issuer_did,omitempty"`

	SchemaId string `json:"schema_id,omitempty"`

	SchemaName string `json:"schema_name,omitempty"`

	SchemaVersion string `json:"schema_version,omitempty"`

	CredDefId string `json:"cred_def_id,omitempty"`

	IssuerDid string `json:"issuer_did,omitempty"`

	ConnectionId string `json:"connection_id"`
}

// AssertIssueCredentialSendProposalRequestDataRequired checks if the required fields are not zero-ed
func AssertIssueCredentialSendProposalRequestDataRequired(obj IssueCredentialSendProposalRequestData) error {
	elements := map[string]interface{}{
		"connection_id": obj.ConnectionId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCredentialPreviewRequired(obj.CredentialProposal); err != nil {
		return err
	}
	return nil
}

// AssertRecurseIssueCredentialSendProposalRequestDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IssueCredentialSendProposalRequestData (e.g. [][]IssueCredentialSendProposalRequestData), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIssueCredentialSendProposalRequestDataRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIssueCredentialSendProposalRequestData, ok := obj.(IssueCredentialSendProposalRequestData)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIssueCredentialSendProposalRequestDataRequired(aIssueCredentialSendProposalRequestData)
	})
}
