/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"log"
	"net/http"

	"github.com/findy-network/findy-agent-backchannel/agent"
)

func getCredStatus(issuer bool, state agent.IssueCredentialState) IssueCredentialState {
	res := ISSUE_CREDENTIAL_CREDENTIAL_RECEIVED
	switch state {
	case agent.PROPOSAL:
		res = ISSUE_CREDENTIAL_PROPOSAL_RECEIVED
		if !issuer {
			res = ISSUE_CREDENTIAL_PROPOSAL_SENT
		}
	case agent.OFFER:
		res = ISSUE_CREDENTIAL_OFFER_SENT
		if !issuer {
			res = ISSUE_CREDENTIAL_OFFER_RECEIVED
		}
	case agent.REQUEST:
		res = ISSUE_CREDENTIAL_REQUEST_RECEIVED
		if !issuer {
			res = ISSUE_CREDENTIAL_REQUEST_SENT
		}
	case agent.CREDENTIAL:
		res = ISSUE_CREDENTIAL_CREDENTIAL_ISSUED
		if !issuer {
			res = ISSUE_CREDENTIAL_CREDENTIAL_RECEIVED
		}
	case agent.DONE:
		res = ISSUE_CREDENTIAL_DONE
	}
	return res
}

// IssueCredentialApiService is a service that implements the logic for the IssueCredentialApiServicer
// This service should implement the business logic for every endpoint for the IssueCredentialApi API.
// Include any external packages or services that will be required by this service.
type IssueCredentialApiService struct {
	a *agent.Agent
}

// NewIssueCredentialApiService creates a default api service
func NewIssueCredentialApiService(a *agent.Agent) IssueCredentialApiServicer {
	return &IssueCredentialApiService{a: a}
}

// IssueCredentialCreateOffer - Create credential offer.
func (s *IssueCredentialApiService) IssueCredentialCreateOffer(ctx context.Context, issueCredentialCreateOfferRequest IssueCredentialCreateOfferRequest) (ImplResponse, error) {
	// TODO - update IssueCredentialCreateOffer with the required logic for this service method.
	// Add api_issue_credential_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, IssueCredentialCreateOffer200Response{}) or use other options such as http.Ok ...
	//return Response(200, IssueCredentialCreateOffer200Response{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("IssueCredentialCreateOffer method not implemented")
}

// IssueCredentialGetByThreadId - Get credential exchange record by thread id
func (s *IssueCredentialApiService) IssueCredentialGetByThreadId(ctx context.Context, credentialExchangeThreadId string) (ImplResponse, error) {
	issuer, state, err := s.a.GetCredential(credentialExchangeThreadId)
	if err != nil {
		return Response(http.StatusNotFound, nil), err
	}

	res := getCredStatus(issuer, state)
	log.Println("IssueCredentialGetByThreadId Credential status ", res, credentialExchangeThreadId)

	return Response(200, IssueCredentialOperationResponse{
		State:    res,
		ThreadId: credentialExchangeThreadId,
	}), nil
}

// IssueCredentialIssue - Issue Credential
func (s *IssueCredentialApiService) IssueCredentialIssue(ctx context.Context, issueCredentialIssueRequest IssueCredentialIssueRequest) (ImplResponse, error) {
	err := s.a.IssueCredential(issueCredentialIssueRequest.Id)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	issuer, state, err := s.a.GetCredential(issueCredentialIssueRequest.Id)
	if err != nil {
		return Response(http.StatusNotFound, nil), err
	}

	res := getCredStatus(issuer, state)
	log.Println("IssueCredentialIssue Credential status ", res, issueCredentialIssueRequest.Id)

	return Response(200, IssueCredentialOperationResponse{
		State:    res,
		ThreadId: issueCredentialIssueRequest.Id,
	}), nil
}

// IssueCredentialSendOffer - Send credential offer
func (s *IssueCredentialApiService) IssueCredentialSendOffer(ctx context.Context, issueCredentialSendOfferRequest IssueCredentialSendOfferRequest) (r ImplResponse, err error) {
	if issueCredentialSendOfferRequest.Id == "" {
		connectionID := issueCredentialSendOfferRequest.Data.ConnectionId
		credDefID := issueCredentialSendOfferRequest.Data.CredDefId
		previewAttributes := issueCredentialSendOfferRequest.Data.CredentialPreview.Attributes
		attributes := make([]*agent.CredentialAttribute, 0)
		for _, attr := range previewAttributes {
			attributes = append(attributes, &agent.CredentialAttribute{
				Name:  attr.Name,
				Value: attr.Value,
			})
		}
		var threadId string
		threadId, err = s.a.OfferCredential(connectionID, credDefID, attributes)
		if err == nil {
			return Response(200, IssueCredentialOperationResponse{State: ISSUE_CREDENTIAL_OFFER_SENT, ThreadId: threadId}), nil
		}
	} else { // offer to proposal
		_, err = s.a.AcceptCredentialProposal(issueCredentialSendOfferRequest.Id)
		if err == nil {
			return Response(200, IssueCredentialOperationResponse{ThreadId: issueCredentialSendOfferRequest.Id, State: ISSUE_CREDENTIAL_OFFER_SENT}), nil
		}
	}
	return Response(http.StatusInternalServerError, nil), err
}

// IssueCredentialSendProposal - Send credential proposal
func (s *IssueCredentialApiService) IssueCredentialSendProposal(ctx context.Context, issueCredentialSendProposalRequest IssueCredentialSendProposalRequest) (ImplResponse, error) {
	connectionID := issueCredentialSendProposalRequest.Data.ConnectionId
	credDefID := issueCredentialSendProposalRequest.Data.CredDefId
	previewAttributes := issueCredentialSendProposalRequest.Data.CredentialProposal.Attributes
	attributes := make([]*agent.CredentialAttribute, 0)
	for _, attr := range previewAttributes {
		attributes = append(attributes, &agent.CredentialAttribute{
			Name:  attr.Name,
			Value: attr.Value,
		})
	}

	threadId, err := s.a.ProposeCredential(connectionID, credDefID, attributes)
	if err == nil {
		return Response(200, IssueCredentialOperationResponse{State: ISSUE_CREDENTIAL_PROPOSAL_SENT, ThreadId: threadId}), nil
	}

	return Response(http.StatusInternalServerError, nil), err
}

// IssueCredentialSendRequest - Send credential request
func (s *IssueCredentialApiService) IssueCredentialSendRequest(ctx context.Context, issueCredentialSendRequestRequest IssueCredentialSendRequestRequest) (ImplResponse, error) {
	threadId, err := s.a.RequestCredential(issueCredentialSendRequestRequest.Id)
	if err == nil {
		return Response(200, IssueCredentialOperationResponse{State: ISSUE_CREDENTIAL_REQUEST_SENT, ThreadId: threadId}), nil
	}

	return Response(http.StatusInternalServerError, nil), err
}

// IssueCredentialStore - Store Credential
func (s *IssueCredentialApiService) IssueCredentialStore(ctx context.Context, issueCredentialStoreRequest IssueCredentialStoreRequest) (ImplResponse, error) {
	err := s.a.ReceiveCredential(issueCredentialStoreRequest.Id)
	if err != nil {
		return Response(http.StatusNotFound, nil), err
	}

	issuer, state, err := s.a.GetCredential(issueCredentialStoreRequest.Id)
	if err != nil {
		return Response(http.StatusNotFound, nil), err
	}

	res := getCredStatus(issuer, state)

	log.Println("IssueCredentialStore Credential status ", res, issueCredentialStoreRequest.Id)

	return Response(200, IssueCredentialOperationResponse{
		State:        res,
		ThreadId:     issueCredentialStoreRequest.Id,
		CredentialId: issueCredentialStoreRequest.Id,
	}), nil

}
