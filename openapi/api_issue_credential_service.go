/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"

	"github.com/findy-network/findy-agent-backchannel/agent"
)

// IssueCredentialApiService is a service that implents the logic for the IssueCredentialApiServicer
// This service should implement the business logic for every endpoint for the IssueCredentialApi API.
// Include any external packages or services that will be required by this service.
type IssueCredentialApiService struct {
	a *agent.Agent
}

// NewIssueCredentialApiService creates a default api service
func NewIssueCredentialApiService(a *agent.Agent) IssueCredentialApiServicer {
	return &IssueCredentialApiService{
		a: a,
	}
}

// IssueCredentialGetByThreadId - Get credential exchange record by thread id
func (s *IssueCredentialApiService) IssueCredentialGetByThreadId(ctx context.Context, credentialExchangeThreadId string) (ImplResponse, error) {

	// HOLDER
	if cred, err := s.a.GetCredential(credentialExchangeThreadId); err == nil {
		return Response(200, IssueCredentialOperationResponse{
			State:    CREDENTIAL_RECEIVED,
			ThreadId: cred.ID,
		}), nil

	}
	if threadID, _ := s.a.GetCredentialOffer(credentialExchangeThreadId); threadID != "" {
		return Response(200, IssueCredentialOperationResponse{
			State:    OFFER_RECEIVED,
			ThreadId: threadID,
		}), nil
	}

	// ISSUER
	if threadID, _ := s.a.GetIssuedCredential(credentialExchangeThreadId); threadID != "" {
		return Response(200, IssueCredentialOperationResponse{
			State:    REQUEST_RECEIVED,
			ThreadId: threadID,
		}), nil
	}
	if _, err := s.a.GetCredentialProposal(credentialExchangeThreadId); err == nil {
		return Response(200, IssueCredentialOperationResponse{
			State:    PROPOSAL_RECEIVED,
			ThreadId: credentialExchangeThreadId,
		}), nil
	}
	return Response(http.StatusNotFound, nil), nil
}

// IssueCredentialIssue - Issue Credential
func (s *IssueCredentialApiService) IssueCredentialIssue(ctx context.Context, req IssueCredentialIssueRequest) (ImplResponse, error) {
	threadID, err := s.a.GetIssuedCredential(req.Id)
	if threadID != "" {
		return Response(200, IssueCredentialOperationResponse{
			State:    CREDENTIAL_ISSUED,
			ThreadId: threadID,
		}), nil
	}

	return Response(http.StatusInternalServerError, nil), err
}

// IssueCredentialSendOffer - Send credential offer
func (s *IssueCredentialApiService) IssueCredentialSendOffer(ctx context.Context, req IssueCredentialOfferRequest) (ImplResponse, error) {
	_, err := s.a.AcceptCredentialProposal(req.Id)
	if err == nil {
		return Response(200, IssueCredentialOperationResponse{ThreadId: req.Id, State: OFFER_SENT}), nil
	}
	return Response(http.StatusInternalServerError, nil), err
}

// IssueCredentialSendProposal - Send credential proposal
func (s *IssueCredentialApiService) IssueCredentialSendProposal(ctx context.Context, inlineObject6 InlineObject6) (ImplResponse, error) {
	connectionID := inlineObject6.Data.ConnectionId
	credDefID := inlineObject6.Data.CredDefId
	previewAttributes := inlineObject6.Data.CredentialProposal.Attributes
	attributes := make([]*agent.CredentialAttribute, 0)
	for _, attr := range previewAttributes {
		attributes = append(attributes, &agent.CredentialAttribute{
			Name:  attr.Name,
			Value: attr.Value,
		})
	}

	threadId, err := s.a.ProposeCredential(connectionID, credDefID, attributes)
	if err == nil {
		return Response(200, IssueCredentialOperationResponse{State: PROPOSAL_SENT, ThreadId: threadId}), nil
	}

	return Response(http.StatusInternalServerError, nil), err
}

// IssueCredentialSendRequest - Send credential request
func (s *IssueCredentialApiService) IssueCredentialSendRequest(ctx context.Context, req SendIssueCredentialRequest) (ImplResponse, error) {
	threadId, err := s.a.RequestCredential(req.Id)
	if err == nil {
		return Response(200, IssueCredentialOperationResponse{State: REQUEST_SENT, ThreadId: threadId}), nil
	}

	return Response(http.StatusInternalServerError, nil), err
}

// IssueCredentialStore - Store Credential
func (s *IssueCredentialApiService) IssueCredentialStore(ctx context.Context, req IssueCredentialStoreRequest) (ImplResponse, error) {
	cred, err := s.a.GetCredential(req.Id)
	if err != nil {
		return Response(http.StatusNotFound, nil), err
	}
	return Response(200, IssueCredentialOperationResponse{ThreadId: cred.ID, CredentialId: cred.ID, State: DONE}), nil
}
