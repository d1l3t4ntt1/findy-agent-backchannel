/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ConnectionApiController binds http requests to an api service and writes the service results to the http response
type ConnectionApiController struct {
	service      ConnectionApiServicer
	errorHandler ErrorHandler
}

// ConnectionApiOption for how the controller is set up.
type ConnectionApiOption func(*ConnectionApiController)

// WithConnectionApiErrorHandler inject ErrorHandler into controller
func WithConnectionApiErrorHandler(h ErrorHandler) ConnectionApiOption {
	return func(c *ConnectionApiController) {
		c.errorHandler = h
	}
}

// NewConnectionApiController creates a default api controller
func NewConnectionApiController(s ConnectionApiServicer, opts ...ConnectionApiOption) Router {
	controller := &ConnectionApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConnectionApiController
func (c *ConnectionApiController) Routes() Routes {
	return Routes{
		{
			"ConnectionAcceptInvitation",
			strings.ToUpper("Post"),
			"/agent/command/connection/{accept-invitation:accept-invitation\\/?}",
			c.ConnectionAcceptInvitation,
		},
		{
			"ConnectionAcceptRequest",
			strings.ToUpper("Post"),
			"/agent/command/connection/{accept-request:accept-request\\/?}",
			c.ConnectionAcceptRequest,
		},
		{
			"ConnectionCreateInvitation",
			strings.ToUpper("Post"),
			"/agent/command/connection/{create-invitation:create-invitation\\/?}",
			c.ConnectionCreateInvitation,
		},
		{
			"ConnectionGetAll",
			strings.ToUpper("Get"),
			"/agent/command/connection",
			c.ConnectionGetAll,
		},
		{
			"ConnectionGetById",
			strings.ToUpper("Get"),
			"/agent/command/connection/{connectionId}",
			c.ConnectionGetById,
		},
		{
			"ConnectionReceiveInvitation",
			strings.ToUpper("Post"),
			"/agent/command/connection/{receive-invitation:receive-invitation\\/?}",
			c.ConnectionReceiveInvitation,
		},
		{
			"ConnectionSendPing",
			strings.ToUpper("Post"),
			"/agent/command/connection/{send-ping:send-ping\\/?}",
			c.ConnectionSendPing,
		},
	}
}

// ConnectionAcceptInvitation - Accept an invitation
func (c *ConnectionApiController) ConnectionAcceptInvitation(w http.ResponseWriter, r *http.Request) {
	connectionAcceptInvitationRequestParam := ConnectionAcceptInvitationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionAcceptInvitationRequestRequired(connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConnectionAcceptInvitation(r.Context(), connectionAcceptInvitationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionAcceptRequest - Accept a connection request
func (c *ConnectionApiController) ConnectionAcceptRequest(w http.ResponseWriter, r *http.Request) {
	connectionAcceptInvitationRequestParam := ConnectionAcceptInvitationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionAcceptInvitationRequestRequired(connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConnectionAcceptRequest(r.Context(), connectionAcceptInvitationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionCreateInvitation - Create a new connection invitation
func (c *ConnectionApiController) ConnectionCreateInvitation(w http.ResponseWriter, r *http.Request) {
	connectionCreateInvitationRequestParam := ConnectionCreateInvitationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionCreateInvitationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionCreateInvitationRequestRequired(connectionCreateInvitationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConnectionCreateInvitation(r.Context(), connectionCreateInvitationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionGetAll - Get all connections
func (c *ConnectionApiController) ConnectionGetAll(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ConnectionGetAll(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionGetById - Get connection by id
func (c *ConnectionApiController) ConnectionGetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	connectionIdParam := params["connectionId"]

	result, err := c.service.ConnectionGetById(r.Context(), connectionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionReceiveInvitation - Receive an invitation
func (c *ConnectionApiController) ConnectionReceiveInvitation(w http.ResponseWriter, r *http.Request) {
	connectionReceiveInvitationRequestParam := ConnectionReceiveInvitationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionReceiveInvitationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionReceiveInvitationRequestRequired(connectionReceiveInvitationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConnectionReceiveInvitation(r.Context(), connectionReceiveInvitationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConnectionSendPing - Send trust ping
func (c *ConnectionApiController) ConnectionSendPing(w http.ResponseWriter, r *http.Request) {
	connectionSendPingRequestParam := ConnectionSendPingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionSendPingRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionSendPingRequestRequired(connectionSendPingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConnectionSendPing(r.Context(), connectionSendPingRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
