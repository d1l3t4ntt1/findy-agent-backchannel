/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CredentialDefinitionApiController binds http requests to an api service and writes the service results to the http response
type CredentialDefinitionApiController struct {
	service      CredentialDefinitionApiServicer
	errorHandler ErrorHandler
}

// CredentialDefinitionApiOption for how the controller is set up.
type CredentialDefinitionApiOption func(*CredentialDefinitionApiController)

// WithCredentialDefinitionApiErrorHandler inject ErrorHandler into controller
func WithCredentialDefinitionApiErrorHandler(h ErrorHandler) CredentialDefinitionApiOption {
	return func(c *CredentialDefinitionApiController) {
		c.errorHandler = h
	}
}

// NewCredentialDefinitionApiController creates a default api controller
func NewCredentialDefinitionApiController(s CredentialDefinitionApiServicer, opts ...CredentialDefinitionApiOption) Router {
	controller := &CredentialDefinitionApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CredentialDefinitionApiController
func (c *CredentialDefinitionApiController) Routes() Routes {
	return Routes{
		{
			"CredentialDefinitionCreate",
			strings.ToUpper("Post"),
			"/agent/command/{credential-definition:credential-definition\\/?}",
			c.CredentialDefinitionCreate,
		},
		{
			"CredentialDefinitionGetById",
			strings.ToUpper("Get"),
			"/agent/command/credential-definition/{credentialDefinitionId}",
			c.CredentialDefinitionGetById,
		},
	}
}

// CredentialDefinitionCreate - Create a new credential definition
func (c *CredentialDefinitionApiController) CredentialDefinitionCreate(w http.ResponseWriter, r *http.Request) {
	credentialDefinitionCreateRequestParam := CredentialDefinitionCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&credentialDefinitionCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCredentialDefinitionCreateRequestRequired(credentialDefinitionCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CredentialDefinitionCreate(r.Context(), credentialDefinitionCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CredentialDefinitionGetById - Get credential definition by id
func (c *CredentialDefinitionApiController) CredentialDefinitionGetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	credentialDefinitionIdParam := params["credentialDefinitionId"]

	result, err := c.service.CredentialDefinitionGetById(r.Context(), credentialDefinitionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
