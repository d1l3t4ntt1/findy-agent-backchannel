/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CoordinateMediationApiController binds http requests to an api service and writes the service results to the http response
type CoordinateMediationApiController struct {
	service CoordinateMediationApiServicer
	errorHandler ErrorHandler
}

// CoordinateMediationApiOption for how the controller is set up.
type CoordinateMediationApiOption func(*CoordinateMediationApiController)

// WithCoordinateMediationApiErrorHandler inject ErrorHandler into controller
func WithCoordinateMediationApiErrorHandler(h ErrorHandler) CoordinateMediationApiOption {
	return func(c *CoordinateMediationApiController) {
		c.errorHandler = h
	}
}

// NewCoordinateMediationApiController creates a default api controller
func NewCoordinateMediationApiController(s CoordinateMediationApiServicer, opts ...CoordinateMediationApiOption) Router {
	controller := &CoordinateMediationApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CoordinateMediationApiController
func (c *CoordinateMediationApiController) Routes() Routes {
	return Routes{ 
		{
			"CoordinateMediationGetByConnectionId",
			strings.ToUpper("Get"),
			"/agent/command/mediation/{connectionId}",
			c.CoordinateMediationGetByConnectionId,
		},
		{
			"CoordinateMediationSendDeny",
			strings.ToUpper("Post"),
			"/agent/command/mediation/send-deny",
			c.CoordinateMediationSendDeny,
		},
		{
			"CoordinateMediationSendGrant",
			strings.ToUpper("Post"),
			"/agent/command/mediation/send-grant",
			c.CoordinateMediationSendGrant,
		},
		{
			"CoordinateMediationSendRequest",
			strings.ToUpper("Post"),
			"/agent/command/mediation/send-request",
			c.CoordinateMediationSendRequest,
		},
	}
}

// CoordinateMediationGetByConnectionId - Get mediation record by connection id
func (c *CoordinateMediationApiController) CoordinateMediationGetByConnectionId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	connectionIdParam := params["connectionId"]
	
	result, err := c.service.CoordinateMediationGetByConnectionId(r.Context(), connectionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CoordinateMediationSendDeny - Send mediation deny message
func (c *CoordinateMediationApiController) CoordinateMediationSendDeny(w http.ResponseWriter, r *http.Request) {
	connectionAcceptInvitationRequestParam := ConnectionAcceptInvitationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionAcceptInvitationRequestRequired(connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CoordinateMediationSendDeny(r.Context(), connectionAcceptInvitationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CoordinateMediationSendGrant - Send mediation grant message
func (c *CoordinateMediationApiController) CoordinateMediationSendGrant(w http.ResponseWriter, r *http.Request) {
	connectionAcceptInvitationRequestParam := ConnectionAcceptInvitationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionAcceptInvitationRequestRequired(connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CoordinateMediationSendGrant(r.Context(), connectionAcceptInvitationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CoordinateMediationSendRequest - Send mediation request message
func (c *CoordinateMediationApiController) CoordinateMediationSendRequest(w http.ResponseWriter, r *http.Request) {
	connectionAcceptInvitationRequestParam := ConnectionAcceptInvitationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectionAcceptInvitationRequestRequired(connectionAcceptInvitationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CoordinateMediationSendRequest(r.Context(), connectionAcceptInvitationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
