/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PresentProofApiController binds http requests to an api service and writes the service results to the http response
type PresentProofApiController struct {
	service      PresentProofApiServicer
	errorHandler ErrorHandler
}

// PresentProofApiOption for how the controller is set up.
type PresentProofApiOption func(*PresentProofApiController)

// WithPresentProofApiErrorHandler inject ErrorHandler into controller
func WithPresentProofApiErrorHandler(h ErrorHandler) PresentProofApiOption {
	return func(c *PresentProofApiController) {
		c.errorHandler = h
	}
}

// NewPresentProofApiController creates a default api controller
func NewPresentProofApiController(s PresentProofApiServicer, opts ...PresentProofApiOption) Router {
	controller := &PresentProofApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PresentProofApiController
func (c *PresentProofApiController) Routes() Routes {
	return Routes{
		{
			"PresentProofGetByThreadId",
			strings.ToUpper("Get"),
			"/agent/command/proof/{presentationExchangeThreadId}",
			c.PresentProofGetByThreadId,
		},
		{
			"PresentProofSendPresentation",
			strings.ToUpper("Post"),
			"/agent/command/proof/{send-presentation:send-presentation\\/?}",
			c.PresentProofSendPresentation,
		},
		{
			"PresentProofSendProposal",
			strings.ToUpper("Post"),
			"/agent/command/proof/{send-proposal:send-proposal\\/?}",
			c.PresentProofSendProposal,
		},
		{
			"PresentProofSendRequest",
			strings.ToUpper("Post"),
			"/agent/command/proof/{send-request:send-request\\/?}",
			c.PresentProofSendRequest,
		},
		{
			"PresentProofVerifyPresentation",
			strings.ToUpper("Post"),
			"/agent/command/proof/{verify-presentation:verify-presentation\\/?}",
			c.PresentProofVerifyPresentation,
		},
	}
}

// PresentProofGetByThreadId - Get presentation exchange record by thread id
func (c *PresentProofApiController) PresentProofGetByThreadId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	presentationExchangeThreadIdParam := params["presentationExchangeThreadId"]

	result, err := c.service.PresentProofGetByThreadId(r.Context(), presentationExchangeThreadIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PresentProofSendPresentation - Send presentation
func (c *PresentProofApiController) PresentProofSendPresentation(w http.ResponseWriter, r *http.Request) {
	presentProofSendPresentationRequestParam := PresentProofSendPresentationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&presentProofSendPresentationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPresentProofSendPresentationRequestRequired(presentProofSendPresentationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PresentProofSendPresentation(r.Context(), presentProofSendPresentationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PresentProofSendProposal - Send presentation proposal
func (c *PresentProofApiController) PresentProofSendProposal(w http.ResponseWriter, r *http.Request) {
	presentProofSendProposalRequestParam := PresentProofSendProposalRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&presentProofSendProposalRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPresentProofSendProposalRequestRequired(presentProofSendProposalRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PresentProofSendProposal(r.Context(), presentProofSendProposalRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PresentProofSendRequest - Send presentation request
func (c *PresentProofApiController) PresentProofSendRequest(w http.ResponseWriter, r *http.Request) {
	presentProofSendRequestRequestParam := PresentProofSendRequestRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&presentProofSendRequestRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPresentProofSendRequestRequestRequired(presentProofSendRequestRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PresentProofSendRequest(r.Context(), presentProofSendRequestRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PresentProofVerifyPresentation - Verify presentation
func (c *PresentProofApiController) PresentProofVerifyPresentation(w http.ResponseWriter, r *http.Request) {
	presentProofVerifyPresentationRequestParam := PresentProofVerifyPresentationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&presentProofVerifyPresentationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPresentProofVerifyPresentationRequestRequired(presentProofVerifyPresentationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PresentProofVerifyPresentation(r.Context(), presentProofVerifyPresentationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
