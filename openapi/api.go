/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)

// ConnectionApiRouter defines the required methods for binding the api requests to a responses for the ConnectionApi
// The ConnectionApiRouter implementation should parse necessary information from the http request,
// pass the data to a ConnectionApiServicer to perform the required actions, then write the service results to the http response.
type ConnectionApiRouter interface {
	ConnectionAcceptInvitation(http.ResponseWriter, *http.Request)
	ConnectionAcceptRequest(http.ResponseWriter, *http.Request)
	ConnectionCreateInvitation(http.ResponseWriter, *http.Request)
	ConnectionGetAll(http.ResponseWriter, *http.Request)
	ConnectionGetById(http.ResponseWriter, *http.Request)
	ConnectionReceiveInvitation(http.ResponseWriter, *http.Request)
	ConnectionSendPing(http.ResponseWriter, *http.Request)
}

// CredentialApiRouter defines the required methods for binding the api requests to a responses for the CredentialApi
// The CredentialApiRouter implementation should parse necessary information from the http request,
// pass the data to a CredentialApiServicer to perform the required actions, then write the service results to the http response.
type CredentialApiRouter interface {
	CredentialGetById(http.ResponseWriter, *http.Request)
}

// CredentialDefinitionApiRouter defines the required methods for binding the api requests to a responses for the CredentialDefinitionApi
// The CredentialDefinitionApiRouter implementation should parse necessary information from the http request,
// pass the data to a CredentialDefinitionApiServicer to perform the required actions, then write the service results to the http response.
type CredentialDefinitionApiRouter interface {
	CredentialDefinitionCreate(http.ResponseWriter, *http.Request)
	CredentialDefinitionGetById(http.ResponseWriter, *http.Request)
}

// DIDApiRouter defines the required methods for binding the api requests to a responses for the DIDApi
// The DIDApiRouter implementation should parse necessary information from the http request,
// pass the data to a DIDApiServicer to perform the required actions, then write the service results to the http response.
type DIDApiRouter interface {
	DIDGetPublic(http.ResponseWriter, *http.Request)
}

// IssueCredentialApiRouter defines the required methods for binding the api requests to a responses for the IssueCredentialApi
// The IssueCredentialApiRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCredentialApiServicer to perform the required actions, then write the service results to the http response.
type IssueCredentialApiRouter interface {
	IssueCredentialGetByThreadId(http.ResponseWriter, *http.Request)
	IssueCredentialIssue(http.ResponseWriter, *http.Request)
	IssueCredentialSendOffer(http.ResponseWriter, *http.Request)
	IssueCredentialSendProposal(http.ResponseWriter, *http.Request)
	IssueCredentialSendRequest(http.ResponseWriter, *http.Request)
	IssueCredentialStore(http.ResponseWriter, *http.Request)
}

// IssueCredentialV2ApiRouter defines the required methods for binding the api requests to a responses for the IssueCredentialV2Api
// The IssueCredentialV2ApiRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCredentialV2ApiServicer to perform the required actions, then write the service results to the http response.
type IssueCredentialV2ApiRouter interface {
	IssueCredentialV2PrepareJsonLD(http.ResponseWriter, *http.Request)
}

// PresentProofApiRouter defines the required methods for binding the api requests to a responses for the PresentProofApi
// The PresentProofApiRouter implementation should parse necessary information from the http request,
// pass the data to a PresentProofApiServicer to perform the required actions, then write the service results to the http response.
type PresentProofApiRouter interface {
	PresentProofGetByThreadId(http.ResponseWriter, *http.Request)
	PresentProofSendPresentation(http.ResponseWriter, *http.Request)
	PresentProofSendProposal(http.ResponseWriter, *http.Request)
	PresentProofSendRequest(http.ResponseWriter, *http.Request)
	PresentProofVerifyPresentation(http.ResponseWriter, *http.Request)
}

// SchemaApiRouter defines the required methods for binding the api requests to a responses for the SchemaApi
// The SchemaApiRouter implementation should parse necessary information from the http request,
// pass the data to a SchemaApiServicer to perform the required actions, then write the service results to the http response.
type SchemaApiRouter interface {
	SchemaCreate(http.ResponseWriter, *http.Request)
	SchemaGetById(http.ResponseWriter, *http.Request)
}

// StatusApiRouter defines the required methods for binding the api requests to a responses for the StatusApi
// The StatusApiRouter implementation should parse necessary information from the http request,
// pass the data to a StatusApiServicer to perform the required actions, then write the service results to the http response.
type StatusApiRouter interface {
	StatusGet(http.ResponseWriter, *http.Request)
	StatusGet_0(http.ResponseWriter, *http.Request)
}

// ConnectionApiServicer defines the api actions for the ConnectionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConnectionApiServicer interface {
	ConnectionAcceptInvitation(context.Context, InlineObject1) (ImplResponse, error)
	ConnectionAcceptRequest(context.Context, InlineObject2) (ImplResponse, error)
	ConnectionCreateInvitation(context.Context) (ImplResponse, error)
	ConnectionGetAll(context.Context) (ImplResponse, error)
	ConnectionGetById(context.Context, string) (ImplResponse, error)
	ConnectionReceiveInvitation(context.Context, InlineObject) (ImplResponse, error)
	ConnectionSendPing(context.Context, InlineObject3) (ImplResponse, error)
}

// CredentialApiServicer defines the api actions for the CredentialApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CredentialApiServicer interface {
	CredentialGetById(context.Context, string) (ImplResponse, error)
}

// CredentialDefinitionApiServicer defines the api actions for the CredentialDefinitionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CredentialDefinitionApiServicer interface {
	CredentialDefinitionCreate(context.Context, InlineObject5) (ImplResponse, error)
	CredentialDefinitionGetById(context.Context, string) (ImplResponse, error)
}

// DIDApiServicer defines the api actions for the DIDApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DIDApiServicer interface {
	DIDGetPublic(context.Context) (ImplResponse, error)
}

// IssueCredentialApiServicer defines the api actions for the IssueCredentialApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCredentialApiServicer interface {
	IssueCredentialGetByThreadId(context.Context, string) (ImplResponse, error)
	IssueCredentialIssue(context.Context, IssueCredentialIssueRequest) (ImplResponse, error)
	IssueCredentialSendOffer(context.Context, IssueCredentialOfferRequest) (ImplResponse, error)
	IssueCredentialSendProposal(context.Context, InlineObject6) (ImplResponse, error)
	IssueCredentialSendRequest(context.Context, SendIssueCredentialRequest) (ImplResponse, error)
	IssueCredentialStore(context.Context, IssueCredentialStoreRequest) (ImplResponse, error)
}

// IssueCredentialV2ApiServicer defines the api actions for the IssueCredentialV2Api service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCredentialV2ApiServicer interface {
	IssueCredentialV2PrepareJsonLD(context.Context, UNKNOWN_BASE_TYPE) (ImplResponse, error)
}

// PresentProofApiServicer defines the api actions for the PresentProofApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PresentProofApiServicer interface {
	PresentProofGetByThreadId(context.Context, string) (ImplResponse, error)
	PresentProofSendPresentation(context.Context, InlineObject9) (ImplResponse, error)
	PresentProofSendProposal(context.Context, InlineObject7) (ImplResponse, error)
	PresentProofSendRequest(context.Context, InlineObject8) (ImplResponse, error)
	PresentProofVerifyPresentation(context.Context, InlineObject10) (ImplResponse, error)
}

// SchemaApiServicer defines the api actions for the SchemaApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SchemaApiServicer interface {
	SchemaCreate(context.Context, InlineObject4) (ImplResponse, error)
	SchemaGetById(context.Context, string) (ImplResponse, error)
}

// StatusApiServicer defines the api actions for the StatusApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusApiServicer interface {
	StatusGet(context.Context) (ImplResponse, error)
	StatusGet_0(context.Context) (ImplResponse, error)
}
