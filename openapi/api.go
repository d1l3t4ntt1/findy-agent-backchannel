/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// AgentApiRouter defines the required methods for binding the api requests to a responses for the AgentApi
// The AgentApiRouter implementation should parse necessary information from the http request,
// pass the data to a AgentApiServicer to perform the required actions, then write the service results to the http response.
type AgentApiRouter interface { 
	AgentStart(http.ResponseWriter, *http.Request)
}
// ConnectionApiRouter defines the required methods for binding the api requests to a responses for the ConnectionApi
// The ConnectionApiRouter implementation should parse necessary information from the http request,
// pass the data to a ConnectionApiServicer to perform the required actions, then write the service results to the http response.
type ConnectionApiRouter interface { 
	ConnectionAcceptInvitation(http.ResponseWriter, *http.Request)
	ConnectionAcceptRequest(http.ResponseWriter, *http.Request)
	ConnectionCreateInvitation(http.ResponseWriter, *http.Request)
	ConnectionGetAll(http.ResponseWriter, *http.Request)
	ConnectionGetById(http.ResponseWriter, *http.Request)
	ConnectionReceiveInvitation(http.ResponseWriter, *http.Request)
	ConnectionSendPing(http.ResponseWriter, *http.Request)
}
// CoordinateMediationApiRouter defines the required methods for binding the api requests to a responses for the CoordinateMediationApi
// The CoordinateMediationApiRouter implementation should parse necessary information from the http request,
// pass the data to a CoordinateMediationApiServicer to perform the required actions, then write the service results to the http response.
type CoordinateMediationApiRouter interface { 
	CoordinateMediationGetByConnectionId(http.ResponseWriter, *http.Request)
	CoordinateMediationSendDeny(http.ResponseWriter, *http.Request)
	CoordinateMediationSendGrant(http.ResponseWriter, *http.Request)
	CoordinateMediationSendRequest(http.ResponseWriter, *http.Request)
}
// CredentialApiRouter defines the required methods for binding the api requests to a responses for the CredentialApi
// The CredentialApiRouter implementation should parse necessary information from the http request,
// pass the data to a CredentialApiServicer to perform the required actions, then write the service results to the http response.
type CredentialApiRouter interface { 
	CredentialDeleteById(http.ResponseWriter, *http.Request)
	CredentialGetById(http.ResponseWriter, *http.Request)
	CredentialGetRevocationStatusById(http.ResponseWriter, *http.Request)
}
// CredentialDefinitionApiRouter defines the required methods for binding the api requests to a responses for the CredentialDefinitionApi
// The CredentialDefinitionApiRouter implementation should parse necessary information from the http request,
// pass the data to a CredentialDefinitionApiServicer to perform the required actions, then write the service results to the http response.
type CredentialDefinitionApiRouter interface { 
	CredentialDefinitionCreate(http.ResponseWriter, *http.Request)
	CredentialDefinitionGetById(http.ResponseWriter, *http.Request)
}
// DIDApiRouter defines the required methods for binding the api requests to a responses for the DIDApi
// The DIDApiRouter implementation should parse necessary information from the http request,
// pass the data to a DIDApiServicer to perform the required actions, then write the service results to the http response.
type DIDApiRouter interface { 
	DIDGetPublic(http.ResponseWriter, *http.Request)
}
// DIDExchangeApiRouter defines the required methods for binding the api requests to a responses for the DIDExchangeApi
// The DIDExchangeApiRouter implementation should parse necessary information from the http request,
// pass the data to a DIDExchangeApiServicer to perform the required actions, then write the service results to the http response.
type DIDExchangeApiRouter interface { 
	DidExchangeCreateRequestResolvableDid(http.ResponseWriter, *http.Request)
	DidExchangeGetById(http.ResponseWriter, *http.Request)
	DidExchangeGetByInvitationId(http.ResponseWriter, *http.Request)
	DidExchangeReceiveRequestResolvableDid(http.ResponseWriter, *http.Request)
	DidExchangeSendRequest(http.ResponseWriter, *http.Request)
	DidExchangeSendResponse(http.ResponseWriter, *http.Request)
}
// IssueCredentialApiRouter defines the required methods for binding the api requests to a responses for the IssueCredentialApi
// The IssueCredentialApiRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCredentialApiServicer to perform the required actions, then write the service results to the http response.
type IssueCredentialApiRouter interface { 
	IssueCredentialCreateOffer(http.ResponseWriter, *http.Request)
	IssueCredentialGetByThreadId(http.ResponseWriter, *http.Request)
	IssueCredentialIssue(http.ResponseWriter, *http.Request)
	IssueCredentialSendOffer(http.ResponseWriter, *http.Request)
	IssueCredentialSendProposal(http.ResponseWriter, *http.Request)
	IssueCredentialSendRequest(http.ResponseWriter, *http.Request)
	IssueCredentialStore(http.ResponseWriter, *http.Request)
}
// IssueCredentialV2ApiRouter defines the required methods for binding the api requests to a responses for the IssueCredentialV2Api
// The IssueCredentialV2ApiRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCredentialV2ApiServicer to perform the required actions, then write the service results to the http response.
type IssueCredentialV2ApiRouter interface { 
	IssueCredentialV2CreateOffer(http.ResponseWriter, *http.Request)
	IssueCredentialV2GetByThreadId(http.ResponseWriter, *http.Request)
	IssueCredentialV2Issue(http.ResponseWriter, *http.Request)
	IssueCredentialV2PrepareJsonLD(http.ResponseWriter, *http.Request)
	IssueCredentialV2SendOffer(http.ResponseWriter, *http.Request)
	IssueCredentialV2SendProposal(http.ResponseWriter, *http.Request)
	IssueCredentialV2SendRequest(http.ResponseWriter, *http.Request)
	IssueCredentialV2Store(http.ResponseWriter, *http.Request)
}
// IssueCredentialV3ApiRouter defines the required methods for binding the api requests to a responses for the IssueCredentialV3Api
// The IssueCredentialV3ApiRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCredentialV3ApiServicer to perform the required actions, then write the service results to the http response.
type IssueCredentialV3ApiRouter interface { 
	IssueCredentialV3Issue(http.ResponseWriter, *http.Request)
	IssueCredentialV3RetrieveCredentialApplication(http.ResponseWriter, *http.Request)
	IssueCredentialV3RetrieveCredentialProposal(http.ResponseWriter, *http.Request)
	IssueCredentialV3SendOffer(http.ResponseWriter, *http.Request)
	IssueCredentialV3SendProposal(http.ResponseWriter, *http.Request)
	IssueCredentialV3SendRequest(http.ResponseWriter, *http.Request)
	IssueCredentialV3Store(http.ResponseWriter, *http.Request)
}
// OutOfBandApiRouter defines the required methods for binding the api requests to a responses for the OutOfBandApi
// The OutOfBandApiRouter implementation should parse necessary information from the http request,
// pass the data to a OutOfBandApiServicer to perform the required actions, then write the service results to the http response.
type OutOfBandApiRouter interface { 
	OutOfBandCreateInvitation(http.ResponseWriter, *http.Request)
	OutOfBandReceiveInvitation(http.ResponseWriter, *http.Request)
}
// OutOfBandV2ApiRouter defines the required methods for binding the api requests to a responses for the OutOfBandV2Api
// The OutOfBandV2ApiRouter implementation should parse necessary information from the http request,
// pass the data to a OutOfBandV2ApiServicer to perform the required actions, then write the service results to the http response.
type OutOfBandV2ApiRouter interface { 
	DIDCommV2AcceptInvitation(http.ResponseWriter, *http.Request)
	DIDCommV2CreateInvitation(http.ResponseWriter, *http.Request)
	DIDCommV2GetByInvitationId(http.ResponseWriter, *http.Request)
}
// PresentProofApiRouter defines the required methods for binding the api requests to a responses for the PresentProofApi
// The PresentProofApiRouter implementation should parse necessary information from the http request,
// pass the data to a PresentProofApiServicer to perform the required actions, then write the service results to the http response.
type PresentProofApiRouter interface { 
	PresentProofGetByThreadId(http.ResponseWriter, *http.Request)
	PresentProofSendPresentation(http.ResponseWriter, *http.Request)
	PresentProofSendProposal(http.ResponseWriter, *http.Request)
	PresentProofSendRequest(http.ResponseWriter, *http.Request)
	PresentProofVerifyPresentation(http.ResponseWriter, *http.Request)
}
// PresentProofV2ApiRouter defines the required methods for binding the api requests to a responses for the PresentProofV2Api
// The PresentProofV2ApiRouter implementation should parse necessary information from the http request,
// pass the data to a PresentProofV2ApiServicer to perform the required actions, then write the service results to the http response.
type PresentProofV2ApiRouter interface { 
	PresentProofV2SendPresentation(http.ResponseWriter, *http.Request)
	PresentProofV2SendRequest(http.ResponseWriter, *http.Request)
	PresentProofV2VerifyPresentation(http.ResponseWriter, *http.Request)
}
// PresentProofV3ApiRouter defines the required methods for binding the api requests to a responses for the PresentProofV3Api
// The PresentProofV3ApiRouter implementation should parse necessary information from the http request,
// pass the data to a PresentProofV3ApiServicer to perform the required actions, then write the service results to the http response.
type PresentProofV3ApiRouter interface { 
	PresentProofV3SendPresentation(http.ResponseWriter, *http.Request)
	PresentProofV3SendProposal(http.ResponseWriter, *http.Request)
	PresentProofV3SendRequest(http.ResponseWriter, *http.Request)
	PresentProofV3VerifyPresentation(http.ResponseWriter, *http.Request)
}
// RevocationApiRouter defines the required methods for binding the api requests to a responses for the RevocationApi
// The RevocationApiRouter implementation should parse necessary information from the http request,
// pass the data to a RevocationApiServicer to perform the required actions, then write the service results to the http response.
type RevocationApiRouter interface { 
	RevocationGetNotificationByThreadId(http.ResponseWriter, *http.Request)
	RevocationRevokeCredential(http.ResponseWriter, *http.Request)
}
// SchemaApiRouter defines the required methods for binding the api requests to a responses for the SchemaApi
// The SchemaApiRouter implementation should parse necessary information from the http request,
// pass the data to a SchemaApiServicer to perform the required actions, then write the service results to the http response.
type SchemaApiRouter interface { 
	SchemaCreate(http.ResponseWriter, *http.Request)
	SchemaGetById(http.ResponseWriter, *http.Request)
}
// StatusApiRouter defines the required methods for binding the api requests to a responses for the StatusApi
// The StatusApiRouter implementation should parse necessary information from the http request,
// pass the data to a StatusApiServicer to perform the required actions, then write the service results to the http response.
type StatusApiRouter interface { 
	StatusGet(http.ResponseWriter, *http.Request)
	VersionGet(http.ResponseWriter, *http.Request)
}


// AgentApiServicer defines the api actions for the AgentApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AgentApiServicer interface { 
	AgentStart(context.Context, AgentStartRequest) (ImplResponse, error)
}


// ConnectionApiServicer defines the api actions for the ConnectionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConnectionApiServicer interface { 
	ConnectionAcceptInvitation(context.Context, ConnectionAcceptInvitationRequest) (ImplResponse, error)
	ConnectionAcceptRequest(context.Context, ConnectionAcceptInvitationRequest) (ImplResponse, error)
	ConnectionCreateInvitation(context.Context, ConnectionCreateInvitationRequest) (ImplResponse, error)
	ConnectionGetAll(context.Context) (ImplResponse, error)
	ConnectionGetById(context.Context, string) (ImplResponse, error)
	ConnectionReceiveInvitation(context.Context, ConnectionReceiveInvitationRequest) (ImplResponse, error)
	ConnectionSendPing(context.Context, ConnectionSendPingRequest) (ImplResponse, error)
}


// CoordinateMediationApiServicer defines the api actions for the CoordinateMediationApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CoordinateMediationApiServicer interface { 
	CoordinateMediationGetByConnectionId(context.Context, string) (ImplResponse, error)
	CoordinateMediationSendDeny(context.Context, ConnectionAcceptInvitationRequest) (ImplResponse, error)
	CoordinateMediationSendGrant(context.Context, ConnectionAcceptInvitationRequest) (ImplResponse, error)
	CoordinateMediationSendRequest(context.Context, ConnectionAcceptInvitationRequest) (ImplResponse, error)
}


// CredentialApiServicer defines the api actions for the CredentialApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CredentialApiServicer interface { 
	CredentialDeleteById(context.Context, string) (ImplResponse, error)
	CredentialGetById(context.Context, string) (ImplResponse, error)
	CredentialGetRevocationStatusById(context.Context, string) (ImplResponse, error)
}


// CredentialDefinitionApiServicer defines the api actions for the CredentialDefinitionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CredentialDefinitionApiServicer interface { 
	CredentialDefinitionCreate(context.Context, CredentialDefinitionCreateRequest) (ImplResponse, error)
	CredentialDefinitionGetById(context.Context, string) (ImplResponse, error)
}


// DIDApiServicer defines the api actions for the DIDApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DIDApiServicer interface { 
	DIDGetPublic(context.Context) (ImplResponse, error)
}


// DIDExchangeApiServicer defines the api actions for the DIDExchangeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DIDExchangeApiServicer interface { 
	DidExchangeCreateRequestResolvableDid(context.Context, DidExchangeCreateRequestResolvableDidRequest) (ImplResponse, error)
	DidExchangeGetById(context.Context, string) (ImplResponse, error)
	DidExchangeGetByInvitationId(context.Context, string) (ImplResponse, error)
	DidExchangeReceiveRequestResolvableDid(context.Context, DidExchangeReceiveRequestResolvableDidRequest) (ImplResponse, error)
	DidExchangeSendRequest(context.Context, ConnectionAcceptInvitationRequest) (ImplResponse, error)
	DidExchangeSendResponse(context.Context, ConnectionAcceptInvitationRequest) (ImplResponse, error)
}


// IssueCredentialApiServicer defines the api actions for the IssueCredentialApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCredentialApiServicer interface { 
	IssueCredentialCreateOffer(context.Context, IssueCredentialCreateOfferRequest) (ImplResponse, error)
	IssueCredentialGetByThreadId(context.Context, string) (ImplResponse, error)
	IssueCredentialIssue(context.Context, IssueCredentialIssueRequest) (ImplResponse, error)
	IssueCredentialSendOffer(context.Context, IssueCredentialSendOfferRequest) (ImplResponse, error)
	IssueCredentialSendProposal(context.Context, IssueCredentialSendProposalRequest) (ImplResponse, error)
	IssueCredentialSendRequest(context.Context, IssueCredentialSendRequestRequest) (ImplResponse, error)
	IssueCredentialStore(context.Context, IssueCredentialStoreRequest) (ImplResponse, error)
}


// IssueCredentialV2ApiServicer defines the api actions for the IssueCredentialV2Api service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCredentialV2ApiServicer interface { 
	IssueCredentialV2CreateOffer(context.Context, CreateOfferToStartCredentialIssuanceFlow1) (ImplResponse, error)
	IssueCredentialV2GetByThreadId(context.Context, string) (ImplResponse, error)
	IssueCredentialV2Issue(context.Context, IssueCredentialIssueRequest) (ImplResponse, error)
	IssueCredentialV2PrepareJsonLD(context.Context, IssueCredentialV2PrepareJsonLdRequest) (ImplResponse, error)
	IssueCredentialV2SendOffer(context.Context, IssueCredentialV2SendOfferRequest) (ImplResponse, error)
	IssueCredentialV2SendProposal(context.Context, IssueCredentialV2SendProposalRequest) (ImplResponse, error)
	IssueCredentialV2SendRequest(context.Context, IssueCredentialV2SendRequestRequest) (ImplResponse, error)
	IssueCredentialV2Store(context.Context, IssueCredentialStoreRequest) (ImplResponse, error)
}


// IssueCredentialV3ApiServicer defines the api actions for the IssueCredentialV3Api service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCredentialV3ApiServicer interface { 
	IssueCredentialV3Issue(context.Context, IssueCredentialV3IssueRequest) (ImplResponse, error)
	IssueCredentialV3RetrieveCredentialApplication(context.Context) (ImplResponse, error)
	IssueCredentialV3RetrieveCredentialProposal(context.Context) (ImplResponse, error)
	IssueCredentialV3SendOffer(context.Context, map[string]interface{}) (ImplResponse, error)
	IssueCredentialV3SendProposal(context.Context, IssueCredentialV3SendProposalRequest) (ImplResponse, error)
	IssueCredentialV3SendRequest(context.Context, map[string]interface{}) (ImplResponse, error)
	IssueCredentialV3Store(context.Context, IssueCredentialStoreRequest) (ImplResponse, error)
}


// OutOfBandApiServicer defines the api actions for the OutOfBandApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type OutOfBandApiServicer interface { 
	OutOfBandCreateInvitation(context.Context, OutOfBandCreateInvitationRequest) (ImplResponse, error)
	OutOfBandReceiveInvitation(context.Context, OutOfBandReceiveInvitationRequest) (ImplResponse, error)
}


// OutOfBandV2ApiServicer defines the api actions for the OutOfBandV2Api service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type OutOfBandV2ApiServicer interface { 
	DIDCommV2AcceptInvitation(context.Context, DidCommV2AcceptInvitationRequest) (ImplResponse, error)
	DIDCommV2CreateInvitation(context.Context, DidCommV2CreateInvitationRequest) (ImplResponse, error)
	DIDCommV2GetByInvitationId(context.Context, string) (ImplResponse, error)
}


// PresentProofApiServicer defines the api actions for the PresentProofApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PresentProofApiServicer interface { 
	PresentProofGetByThreadId(context.Context, string) (ImplResponse, error)
	PresentProofSendPresentation(context.Context, PresentProofSendPresentationRequest) (ImplResponse, error)
	PresentProofSendProposal(context.Context, PresentProofSendProposalRequest) (ImplResponse, error)
	PresentProofSendRequest(context.Context, PresentProofSendRequestRequest) (ImplResponse, error)
	PresentProofVerifyPresentation(context.Context, PresentProofVerifyPresentationRequest) (ImplResponse, error)
}


// PresentProofV2ApiServicer defines the api actions for the PresentProofV2Api service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PresentProofV2ApiServicer interface { 
	PresentProofV2SendPresentation(context.Context, PresentProofV2SendPresentationRequest) (ImplResponse, error)
	PresentProofV2SendRequest(context.Context, PresentProofV2SendRequestRequest) (ImplResponse, error)
	PresentProofV2VerifyPresentation(context.Context, PresentProofVerifyPresentationRequest) (ImplResponse, error)
}


// PresentProofV3ApiServicer defines the api actions for the PresentProofV3Api service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PresentProofV3ApiServicer interface { 
	PresentProofV3SendPresentation(context.Context, PresentProofV2SendPresentationRequest) (ImplResponse, error)
	PresentProofV3SendProposal(context.Context, PresentProofV3SendProposalRequest) (ImplResponse, error)
	PresentProofV3SendRequest(context.Context, PresentProofV3SendRequestRequest) (ImplResponse, error)
	PresentProofV3VerifyPresentation(context.Context, PresentProofVerifyPresentationRequest) (ImplResponse, error)
}


// RevocationApiServicer defines the api actions for the RevocationApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RevocationApiServicer interface { 
	RevocationGetNotificationByThreadId(context.Context, string) (ImplResponse, error)
	RevocationRevokeCredential(context.Context, RevocationRevokeCredentialRequest) (ImplResponse, error)
}


// SchemaApiServicer defines the api actions for the SchemaApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SchemaApiServicer interface { 
	SchemaCreate(context.Context, SchemaCreateRequest) (ImplResponse, error)
	SchemaGetById(context.Context, string) (ImplResponse, error)
}


// StatusApiServicer defines the api actions for the StatusApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusApiServicer interface { 
	StatusGet(context.Context) (ImplResponse, error)
	VersionGet(context.Context) (ImplResponse, error)
}
