/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// PresentProofV3ApiController binds http requests to an api service and writes the service results to the http response
type PresentProofV3ApiController struct {
	service      PresentProofV3ApiServicer
	errorHandler ErrorHandler
}

// PresentProofV3ApiOption for how the controller is set up.
type PresentProofV3ApiOption func(*PresentProofV3ApiController)

// WithPresentProofV3ApiErrorHandler inject ErrorHandler into controller
func WithPresentProofV3ApiErrorHandler(h ErrorHandler) PresentProofV3ApiOption {
	return func(c *PresentProofV3ApiController) {
		c.errorHandler = h
	}
}

// NewPresentProofV3ApiController creates a default api controller
func NewPresentProofV3ApiController(s PresentProofV3ApiServicer, opts ...PresentProofV3ApiOption) Router {
	controller := &PresentProofV3ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PresentProofV3ApiController
func (c *PresentProofV3ApiController) Routes() Routes {
	return Routes{
		{
			"PresentProofV3SendPresentation",
			strings.ToUpper("Post"),
			"/agent/command/proof-v3/send-presentation",
			c.PresentProofV3SendPresentation,
		},
		{
			"PresentProofV3SendProposal",
			strings.ToUpper("Post"),
			"/agent/command/proof-v3/send-proposal",
			c.PresentProofV3SendProposal,
		},
		{
			"PresentProofV3SendRequest",
			strings.ToUpper("Post"),
			"/agent/command/proof-v3/send-request",
			c.PresentProofV3SendRequest,
		},
		{
			"PresentProofV3VerifyPresentation",
			strings.ToUpper("Post"),
			"/agent/command/proof-v3/verify-presentation",
			c.PresentProofV3VerifyPresentation,
		},
	}
}

// PresentProofV3SendPresentation - Send presentation
func (c *PresentProofV3ApiController) PresentProofV3SendPresentation(w http.ResponseWriter, r *http.Request) {
	presentProofV2SendPresentationRequestParam := PresentProofV2SendPresentationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&presentProofV2SendPresentationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPresentProofV2SendPresentationRequestRequired(presentProofV2SendPresentationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PresentProofV3SendPresentation(r.Context(), presentProofV2SendPresentationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PresentProofV3SendProposal - Send presentation proposal
func (c *PresentProofV3ApiController) PresentProofV3SendProposal(w http.ResponseWriter, r *http.Request) {
	presentProofV3SendProposalRequestParam := PresentProofV3SendProposalRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&presentProofV3SendProposalRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPresentProofV3SendProposalRequestRequired(presentProofV3SendProposalRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PresentProofV3SendProposal(r.Context(), presentProofV3SendProposalRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PresentProofV3SendRequest - Send present-proof v3 presentation request
func (c *PresentProofV3ApiController) PresentProofV3SendRequest(w http.ResponseWriter, r *http.Request) {
	presentProofV3SendRequestRequestParam := PresentProofV3SendRequestRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&presentProofV3SendRequestRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPresentProofV3SendRequestRequestRequired(presentProofV3SendRequestRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PresentProofV3SendRequest(r.Context(), presentProofV3SendRequestRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PresentProofV3VerifyPresentation - Verify presentation
func (c *PresentProofV3ApiController) PresentProofV3VerifyPresentation(w http.ResponseWriter, r *http.Request) {
	presentProofVerifyPresentationRequestParam := PresentProofVerifyPresentationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&presentProofVerifyPresentationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPresentProofVerifyPresentationRequestRequired(presentProofVerifyPresentationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PresentProofV3VerifyPresentation(r.Context(), presentProofVerifyPresentationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
