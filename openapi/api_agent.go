/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AgentApiController binds http requests to an api service and writes the service results to the http response
type AgentApiController struct {
	service      AgentApiServicer
	errorHandler ErrorHandler
}

// AgentApiOption for how the controller is set up.
type AgentApiOption func(*AgentApiController)

// WithAgentApiErrorHandler inject ErrorHandler into controller
func WithAgentApiErrorHandler(h ErrorHandler) AgentApiOption {
	return func(c *AgentApiController) {
		c.errorHandler = h
	}
}

// NewAgentApiController creates a default api controller
func NewAgentApiController(s AgentApiServicer, opts ...AgentApiOption) Router {
	controller := &AgentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AgentApiController
func (c *AgentApiController) Routes() Routes {
	return Routes{
		{
			"AgentStart",
			strings.ToUpper("Post"),
			"/agent/command/agent/start",
			c.AgentStart,
		},
	}
}

// AgentStart - (re)start the agent
func (c *AgentApiController) AgentStart(w http.ResponseWriter, r *http.Request) {
	agentStartRequestParam := AgentStartRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&agentStartRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAgentStartRequestRequired(agentStartRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AgentStart(r.Context(), agentStartRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
