/*
 * Aries Agent Test Harness Backchannel API
 *
 * This page documents the backchannel API the test harness uses to communicate with agents under tests.  For more information checkout the [Aries Interoperability Information](http://aries-interop.info) page.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"log"
	"net/http"

	"github.com/findy-network/findy-agent-backchannel/agent"
)

func getProofStatus(verifier bool, state agent.PresentProofState) PresentProofState {
	res := PROOF_DONE
	switch state {
	case agent.StateProofProposal:
		res = PROOF_PROPOSAL_RECEIVED
		if !verifier {
			res = PROOF_PROPOSAL_SENT
		}
	case agent.StateProofRequest:
		res = PROOF_REQUEST_SENT
		if !verifier {
			res = PROOF_REQUEST_RECEIVED
		}
	case agent.StateProofPresentation:
		res = PROOF_PRESENTATION_RECEIVED
		if !verifier {
			res = PROOF_PRESENTATION_SENT
		}
	case agent.StateProofDone:
		res = PROOF_DONE
	}
	return res
}

// PresentProofApiService is a service that implents the logic for the PresentProofApiServicer
// This service should implement the business logic for every endpoint for the PresentProofApi API.
// Include any external packages or services that will be required by this service.
type PresentProofApiService struct {
	a *agent.Agent
}

// NewPresentProofApiService creates a default api service
func NewPresentProofApiService(a *agent.Agent) PresentProofApiServicer {
	return &PresentProofApiService{
		a: a,
	}
}

// PresentProofGetByThreadId - Get presentation exchange record by thread id
func (s *PresentProofApiService) PresentProofGetByThreadId(ctx context.Context, presentationExchangeThreadId string) (ImplResponse, error) {
	verifier, state, err := s.a.GetProof(presentationExchangeThreadId)
	if err != nil {
		return Response(http.StatusNotFound, nil), err
	}

	res := getProofStatus(verifier, state)
	log.Println("PresentProofGetByThreadId Proof status ", res, presentationExchangeThreadId)

	return Response(200, PresentProofOperationResponse{
		State:    res,
		ThreadId: presentationExchangeThreadId,
	}), nil

}

// PresentProofSendPresentation - Send presentation
func (s *PresentProofApiService) PresentProofSendPresentation(ctx context.Context, inlineObject9 InlineObject9) (ImplResponse, error) {
	threadId, err := s.a.SendProofPresentation(inlineObject9.Id)
	if err == nil {
		return Response(200, PresentProofOperationResponse{State: PROOF_PRESENTATION_SENT, ThreadId: threadId}), nil
	}

	return Response(http.StatusInternalServerError, nil), err
}

// PresentProofSendProposal - Send presentation proposal
func (s *PresentProofApiService) PresentProofSendProposal(ctx context.Context, inlineObject7 InlineObject7) (ImplResponse, error) {
	connectionID := inlineObject7.Data.ConnectionId
	proposalAttributes := inlineObject7.Data.PresentationProposal.Attributes
	attributes := make([]*agent.ProofAttribute, 0)
	for _, attr := range proposalAttributes {
		attributes = append(attributes, &agent.ProofAttribute{
			Name:      attr.Name,
			CredDefID: attr.CredDefId,
		})
	}

	threadId, err := s.a.ProposeProof(connectionID, attributes)
	if err == nil {
		return Response(200, PresentProofOperationResponse{State: PROOF_PROPOSAL_SENT, ThreadId: threadId}), nil
	}

	return Response(http.StatusInternalServerError, nil), err
}

// PresentProofSendRequest - Send presentation request
func (s *PresentProofApiService) PresentProofSendRequest(ctx context.Context, inlineObject8 InlineObject8) (ImplResponse, error) {
	connectionID := inlineObject8.Data.ConnectionId
	proposalAttributes := inlineObject8.Data.PresentationRequest.ProofRequest.Data.RequestedAttributes
	attributes := make([]*agent.ProofAttribute, 0)
	for key, value := range proposalAttributes {
		if value.Name != "" {
			attributes = append(attributes, &agent.ProofAttribute{
				Name: value.Name,
				ID:   key,
			})
		} else {
			for _, name := range value.Names {
				attributes = append(attributes, &agent.ProofAttribute{
					Name: name,
					ID:   key,
				})
			}
		}
	}

	proposalPredicates := inlineObject8.Data.PresentationRequest.ProofRequest.Data.RequestedPredicates
	predicates := make([]*agent.ProofPredicate, 0)
	for key, value := range proposalPredicates {
		valueMap := value.(map[string]interface{})
		predicates = append(predicates, &agent.ProofPredicate{
			ID:     key,
			Name:   valueMap["name"].(string),
			PType:  valueMap["p_type"].(string),
			PValue: int64(valueMap["p_value"].(float64)), // TODO: check does indy support float or int
		})
	}

	threadId, err := s.a.RequestProof(connectionID, attributes, predicates)
	if err == nil {
		return Response(200, PresentProofOperationResponse{State: PROOF_REQUEST_SENT, ThreadId: threadId}), nil
	}

	return Response(http.StatusInternalServerError, nil), err
}

// PresentProofVerifyPresentation - Verify presentation
func (s *PresentProofApiService) PresentProofVerifyPresentation(ctx context.Context, inlineObject10 InlineObject10) (ImplResponse, error) {
	err := s.a.VerifyPresentation(inlineObject10.Id)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	verifier, state, err := s.a.GetProof(inlineObject10.Id)
	if err != nil {
		return Response(http.StatusNotFound, nil), err
	}

	res := getProofStatus(verifier, state)
	log.Println("PresentProofVerifyPresentation Proof status ", res, inlineObject10.Id)

	return Response(200, PresentProofOperationResponse{
		State:    res,
		ThreadId: inlineObject10.Id,
	}), nil
}
